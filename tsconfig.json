{
  "compilerOptions": {
    // Specifies the ECMAScript target version for output JavaScript
    // "es5" = ES5 (older browsers), "es6" = ES2015, "esnext" = latest features
    "target": "es5",

    // Specifies which library files to include in the compilation
    // "dom" = browser APIs, "dom.iterable" = iterable DOM APIs, "esnext" = latest ECMAScript features
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],

    // Allows JavaScript files to be compiled (useful for gradual migration from JS to TS)
    "allowJs": true,

    // Skip type checking of declaration files (*.d.ts) - speeds up compilation
    "skipLibCheck": true,

    // Enables compatibility with CommonJS modules (allows import/export from JS modules)
    "esModuleInterop": true,

    // Allows default imports from modules with no default export
    // Enables: import React from 'react' instead of import * as React from 'react'
    "allowSyntheticDefaultImports": true,

    // Enables all strict type checking options:
    // - noImplicitAny: Raise error on expressions and declarations with implied 'any' type
    // - strictNullChecks: Raise error when accessing properties of null/undefined
    // - strictFunctionTypes: Enable strict checking of function types
    // - strictBindCallApply: Enable strict checking of bind, call, and apply methods
    // - strictPropertyInitialization: Ensure non-undefined class properties are initialized
    // - noImplicitThis: Raise error on 'this' expressions with implied 'any' type
    // - alwaysStrict: Parse in strict mode and emit "use strict" for each source file
    "strict": true,

    // Ensures consistent casing in file names (important for case-sensitive systems)
    "forceConsistentCasingInFileNames": true,

    // Report errors for fallthrough cases in switch statements
    // Prevents accidental fallthrough bugs in switch/case statements
    "noFallthroughCasesInSwitch": true,

    // Specifies the module code generation method:
    // "esnext" = ES modules (import/export), "commonjs" = require/module.exports
    "module": "esnext",

    // Specifies how to resolve module imports:
    // "node" = Node.js resolution algorithm, "classic" = TypeScript's old resolution
    "moduleResolution": "node",

    // Allows importing JSON files as modules (import data from './data.json')
    "resolveJsonModule": true,

    // Ensures each file can be safely transpiled independently
    // Required for tools like Babel that process files individually
    "isolatedModules": true,

    // Don't emit output files (just type check) - useful with tools like Babel
    // Set to false if you want TypeScript to generate JavaScript files
    "noEmit": true,

    // Specifies JSX code generation:
    // "react-jsx" = React 17+ JSX transform, "react" = classic JSX transform
    "jsx": "react-jsx"
  },

  // Specifies which files/folders to include in compilation
  // "src" = all files in the src directory and subdirectories
  "include": [
    "src"
  ]
}
